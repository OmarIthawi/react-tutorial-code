// tutorial.js
var CommentBox = React.createClass({
  getInitialState: function () {
    return {
      data: []
    };
  },
  loadCommentsFromServer: function () {
    var url = this.props.url;

    $.ajax({
      url: url,
      dataType: 'json',
      cache: false,
      success: (data) => this.setState({data: data}),
      error: (xhr, status, err) => console.error(url, xhr, status, err)
    });
  },
  handleCommentSubmit: function (comment) {
    var url = this.props.url;
    var comments = this.state.data;

    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});

    $.ajax({
      url: url,
      dataType: 'json',
      type: 'POST',
      success: (data) => this.setState({data: data}),
      error: (xhr, status, err) => console.error(url, xhr, status, err)
    });
  },
  componentDidMount: function () {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function () {
    return (
      <div className="commentBox">
        <h1>Comments</h1>

        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    )
  }
});

var Comment = React.createClass({
  rawMarkup: function () {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});

    return {
      __html: rawMarkup
    };
  },
  render: function () {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>

        <span dangerouslySetInnerHTML={this.rawMarkup()}></span>
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function () {
    var commentsNodes = this.props.data.map(function (comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });

    return (
      <div className="commentList">
        {commentsNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function () {
    return {
      author: '',
      text: ''
    };
  },
  handleAuthorChange: function (e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function (e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function (e) {
    e.preventDefault();

    var author = this.state.author.trim();
    var text = this.state.text.trim();

    if (!author || !text) {
      return;
    }

    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function () {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <hr />
        <p>
          <input type="text" placeholder="Your name"
                 value={this.state.author}
                 onChange={this.handleAuthorChange} />
        </p>
        <p>
          <input type="text" placeholder="Say something..."
                 value={this.state.text}
                 onChange={this.handleTextChange} />
        </p>
        <p>
          <input type="submit" value="Post" />
        </p>
      </form>
    );
  }
});


ReactDOM.render(
  <CommentBox url="/api/comments.json" pollInterval={330} />,
  document.getElementById('content')
);
